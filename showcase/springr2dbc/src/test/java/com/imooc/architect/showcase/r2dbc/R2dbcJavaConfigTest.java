package com.imooc.architect.showcase.r2dbc;

import io.r2dbc.spi.Connection;
import io.r2dbc.spi.ConnectionFactory;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.r2dbc.core.DatabaseClient;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Function;

import static org.junit.jupiter.api.Assertions.*;

@Slf4j
@SpringJUnitConfig({R2dbcJavaConfig.class})
class R2dbcJavaConfigTest {

    @Autowired
    private ConnectionFactory connectionFactory;
    @Autowired
    private DatabaseClient client;

    @BeforeEach
    public void before() {
        String sql = "drop table t_demo_model if exists;\n" +
                "create table t_demo_model (\n" +
                "  id bigint generated by default as identity,\n" +
                "  name varchar(255), note varchar(255),\n" +
                "  status integer,\n" +
                "  description varchar(255),\n" +
                "  create_time timestamp,\n" +
                "  last_modified_time timestamp,\n" +
                "  primary key (id)\n" +
                ");\n" +
                "\n" +
                "insert into t_demo_model(name,status,description,create_time,last_modified_time)\n" +
                "VALUES\n" +
                "  ('test1',1,'test1',now(),now()),\n" +
                "  ('test2',1,'test2',now(),now()),\n" +
                "  ('test3',1,'test3',now(),now()),\n" +
                "  ('test4',1,'test4',now(),now());";
        client.sql(sql).then();

    }

    @Test
    public void testQuery() {
        String sql = "select id,name,status,description from t_demo_model";
        Flux<Map<String, Object>> mapFlux = client.sql(sql).fetch().all();
        mapFlux.subscribe(new Consumer<Map<String, Object>>() {
            @Override
            public void accept(Map<String, Object> stringObjectMap) {
                log.info("item = {}", stringObjectMap);
            }
        });
    }
}